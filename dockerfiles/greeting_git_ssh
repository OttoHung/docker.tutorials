# syntax=docker/dockerfile:1.4
## The above line indicates what version of Dockerfile is.

## This docker file build image from a specific workspace
## In this case, greeting service will be included

#####################################################################
# Caution:
#   This dockerfile cannot build image due to buildx download git 
#   repository before executing instructions and the SSH key only can
#   be loaded in the `RUN` instruction after the git repository has 
#   been downloaded.
#   Alternatively, using `RUN` instruction to clone git repository as:
#       `RUN --mount=type=ssh git clone ${SSH_URL}`
#   
#   By using `--ssh` in the command prompt, the SSH keys won't be 
#   stored in the image based on experiment.
#####################################################################

## Use DOCKER_BUILDKIT=1 in the command line prompt to speed up the build time
## *-alpine doesn't have git installed
FROM node:14.17.1-alpine AS baseBuild
WORKDIR /build

## alpine doesn't have openssh-client and git
RUN apk add --no-cache openssh-client \
    && apk add git

## This must be run before cloning the git repository
RUN mkdir -p -m 0700 ~/.ssh \
    && ssh-keyscan -H github.com >> ~/.ssh/known_hosts

## This doens't work because `buildx` cannot clone git repository due to 
## this is no way to provide the SSH keys to the clone process.
## Based on the experiment, the clone process is commenced before executing
## the first instructions.
COPY --from=repo ["./", "/build"]


## In order to install modules from private package registry, access token must
## be loaded by secret. Due to root is not accessible, the best practice is 
## using project location to save access token temporaryly.
## And run `install` command at the same layer to get the access to access token.
## Based on https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information,
## this secret won't store at the final image at all.
RUN --mount=type=secret,id=npm,target=/build/.npmrc \
    yarn install
RUN yarn build


FROM node:14.17.1-alpine AS moduleBuild
WORKDIR /module
COPY --from=baseBuild ["/build/node_modules", "/module/node_modules"]
COPY --from=baseBuild ["/build/package.json", "/module"]
COPY --from=baseBuild ["/build/LICENSE", "/module"]
COPY --from=baseBuild ["/build/workspaces/greeting", "/module/workspaces/greeting"]


## In this build, all source files are discarded to reduce the size of image
FROM node:14.17.1-alpine AS appBuild
WORKDIR /app
COPY --from=moduleBuild ["/module/node_modules", "/app/node_modules"]
COPY --from=moduleBuild ["/module/package.json", "/app"]
COPY --from=moduleBuild ["/module/LICENSE", "/app"]

## THis line must be executed before others to eliminate build error(xxx is not a directory)
COPY --from=moduleBuild ["/module/workspaces/greeting/dist", "/app/workspaces/greeting/dist"]

COPY --from=moduleBuild ["/module/workspaces/greeting/package.json", "/app/workspaces/greeting"]
EXPOSE 5478

## To use `ENTRYPOINT` due to this image should be started up
## from `server.js` file
ENTRYPOINT [ "node", "workspaces/greeting/dist/server.js"]
